geom_text(aes(label = Label), position = position_stack(vjust = 0.5), color = "white",size=32 +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.key.size = unit(8, 'pt'))
g
g <- ggplot(count_data, aes(x = Genome, y = n, fill = Trimmed.Profile)) +
geom_bar(stat = "identity",color="black") +
theme_minimal() +
geom_text(aes(label = Label), position = position_stack(vjust = 0.5), color = "white",size=32 +
labs(x = "Genome", y = "Count", fill = "HMM Profile", title = "Count of Each HMM Profile by Genome") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.text = element_text(size = 8),
legend.key.size = unit(8, 'pt'))
g
g <- ggplot(count_data, aes(x = Genome, y = n, fill = Trimmed.Profile)) +
geom_bar(stat = "identity",color="black") +
theme_minimal() +
geom_text(aes(label = Label), position = position_stack(vjust = 0.5), color = "white",size=32) +
labs(x = "Genome", y = "Count", fill = "HMM Profile", title = "Count of Each HMM Profile by Genome") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.text = element_text(size = 8),
legend.key.size = unit(8, 'pt'))
g
g <- ggplot(count_data, aes(x = Genome, y = n, fill = Trimmed.Profile)) +
geom_bar(stat = "identity",color="black") +
theme_minimal() +
geom_text(aes(label = Label), position = position_stack(vjust = 0.5), color = "white",size=2) +
labs(x = "Genome", y = "Count", fill = "HMM Profile", title = "Count of Each HMM Profile by Genome") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.text = element_text(size = 8),
legend.key.size = unit(8, 'pt'))
g
### Heatmap of substrates
```{r}
g <- ggplot(count_substrate, aes(y = Substrates, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(y = "Substrate", x = "Genome", fill = "Count") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g
g
View(all_content_function)
View(overview_content)
View(function_info)
library(tidyverse)
library(dplyr)
library(readxl)
#Define the subdirectories in which my annotated genomes and data exist
subdir <- list.dirs("./Muribaculaceae_genomes/Annotations", recursive=FALSE)
#Create dataframe into which the data will land
all_content <- data.frame()
#Function for reading the annotated genome data
read_dbCAN <- function(filepath,genome){
dbCAN <- read.delim2(filepath,header=TRUE,sep="\t")
dbCAN$Genome <- basename(genome)
return(dbCAN)
}
#For loop reads all annotated genome data and appends to a single dataframe
for (s in subdir){
g <- basename(s)
s_fp <- paste(s,"/hmmer.out",sep="")
overview_content <- read_dbCAN(s_fp,g)
n <- nrow(overview_content) #count number of GHs
n2 <- length(unique(overview_content$HMM.Profile))
print(paste(g,"contains",n,"GH loci total and",n2,"unique GHs",sep=" "))
all_content <- rbind(all_content,overview_content)}
#Move the genome column to be first :)
all_content <- all_content %>% select("Genome",everything()) %>%
mutate(HMM.Profile = str_remove(HMM.Profile,"\\.hmm$"))
print("Genome data has been collected and merged! Proceed to next block.")
#Labels from Carolina, combined into one comprehensive list
plant=c('GH1','GH2','GH3','GH4','GH5','GH8','GH9','GH11','GH12','GH15','GH16','GH17','GH26','GH27','GH28','GH29','GH36','GH39','GH43','GH44','GH48','GH51','GH53','GH55','GH67','GH74','GH78','GH93','GH94','GH95','GH115','GH117','GH121','PL1','PL2','PL6','PL7','PL9','PL11','PL15','PL22')
animal=c('GH1','GH2','GH3','GH4','GH18','GH19','GH20','GH29','GH33','GH38','GH58','GH79','GH84','GH85','GH88','GH89','GH92','GH95','GH98','GH99','GH101','GH105','GH109','GH110','GH113','PL6', 'PL8','PL12','PL13','PL21')
pg=c('GH23','GH24','GH25','GH73','GH102','GH103','GH104','GH108')
starch=c('GH13','GH15','GH57','GH77')
sucrose=c('GH32','GH68','GH70','GH91')
fungal=c('GH5','GH8','GH16','GH18','GH19','GH20','GH55','GH64','GH71','GH81')
dextran=c('GH66','GH70','GH87')
mucin=c('GH33','CBM40','GH29-B','GH29-A','CBM32','GH29','CBM32','FIVAR','GHnc','GH95','CBM51','GH101','GH129','GH20','GH2','GH42','GH84','GH89','UNK','Fn3')
sources <- list(plant=plant,animal=animal,pg=pg,starch=starch,sucrose=sucrose,fungal=fungal,
dextran=dextran,mucin=mucin)
sources.df <-  data.frame()
for (s in unique(unlist(sources))) {
Sources <- names(sources)[sapply(sources, function(v) s %in% v)]
# print(n)
sources.df <- rbind(sources.df, data.frame(Family = s, Source = paste(Sources, collapse = ","), stringsAsFactors = FALSE))}
#Factor and sort by GH number if applicable, for cleanliness
sources.df <- sources.df %>%
mutate(t = sub("_\\d+$", "", Family)) %>%
mutate(n = as.numeric(sub("GH", "", t)),  t = factor(t, levels = paste0("GH", sort(unique(n))))) %>%
select(Family,Source)
substrate_info <- read.delim2("fam-substrate-mapping-08012023.tsv") %>%
select(Substrate_high_level, Family) %>% unique() %>%
group_by(Family) %>%
summarise(Substrates = paste(Substrate_high_level, collapse = ", "), .groups = 'drop') %>%
filter(nzchar(Family)) %>%
left_join(sources.df, by = join_by(Family==Family))
function_info <- read_xls("dbCAN-sub.substrate.mapping.xls")
all_content_function <- all_content %>%
left_join(function_info,by= c("HMM.Profile" = "Family"),relationship="many-to-many")
#Filter for just GHs and then add substrate information
all_content_substrate <- all_content %>%
filter(grepl("GH",HMM.Profile)) %>%
mutate(Trimmed.Profile = sub("_\\d+$", "", HMM.Profile)) %>%
left_join(substrate_info,by= c("Trimmed.Profile" = "Family")) %>%
select(Genome, HMM.Profile, Trimmed.Profile, Substrates, Source,E.Value, Coverage) %>%
mutate(
HMM.Profile.Number = as.numeric(sub("GH", "", Trimmed.Profile)),
Trimmed.Profile = factor(Trimmed.Profile, levels = paste0("GH", sort(unique(HMM.Profile.Number))))
)
count_data <- all_content_substrate %>%
count(Genome, Trimmed.Profile) %>%
mutate(Label = if_else(n >= 8, as.character(Trimmed.Profile), ""))  # Create labels only for counts > 10
g <- ggplot(count_data, aes(x = Genome, y = n, fill = Trimmed.Profile)) +
geom_bar(stat = "identity",color="black") +
theme_minimal() +
geom_text(aes(label = Label), position = position_stack(vjust = 0.5), color = "white",size=2) +
labs(x = "Genome", y = "Count", fill = "HMM Profile", title = "Count of Each HMM Profile by Genome") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.text = element_text(size = 8),
legend.key.size = unit(8, 'pt'))
g
count_substrate <- all_content_substrate %>%
separate_rows(Substrates, sep=", ") %>%
count(Genome, Substrates)
g <- ggplot(count_substrate, aes(y = Substrates, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(y = "Substrate", x = "Genome", fill = "Count") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g
g
view(count_substrate)
count_substrate <- all_content_substrate %>%
separate_rows(Substrates, sep=", ") %>%
count(Genome, Substrates)
l <- c(setdiff(unique(count_substrate$Genome), "B theta"),
"B theta")
count_substrate$Genome <- factor(count_substrate$Genome, levels=l)
g <- ggplot(count_substrate, aes(y = Substrates, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(y = "Substrate", x = "Genome", fill = "Count") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g
count_substrate <- all_content_substrate %>%
separate_rows(Substrates, sep=", ") %>%
count(Genome, Substrates)
l <- c(setdiff(unique(count_substrate$Genome), "B theta"),
"B theta")
count_substrate$Genome <- factor(count_substrate$Genome, levels=l)
g <- ggplot(count_substrate, aes(y = Substrates, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(y = "Substrate", x = "Genome", fill = "Count") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g
levels(count_substrate$Genome)
l <- c(setdiff(unique(count_substrate$Genome), "B_theta"),
"B_theta")
count_substrate$Genome <- factor(count_substrate$Genome, levels=l)
g <- ggplot(count_substrate, aes(y = Substrates, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(y = "Substrate", x = "Genome", fill = "Count") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g
#Define the subdirectories in which my annotated genomes and data exist
subdir <- list.dirs("./Muribaculaceae_genomes/Annotations", recursive=FALSE)
#Create dataframe into which the data will land
all_content <- data.frame()
#Function for reading the annotated genome data
read_dbCAN <- function(filepath,genome){
dbCAN <- read.delim2(filepath,header=TRUE,sep="\t")
dbCAN$Genome <- basename(genome)
return(dbCAN)
}
#For loop reads all annotated genome data and appends to a single dataframe
for (s in subdir){
g <- basename(s)
s_fp <- paste(s,"/hmmer.out",sep="")
overview_content <- read_dbCAN(s_fp,g)
n <- nrow(overview_content) #count number of GHs
n2 <- length(unique(overview_content$HMM.Profile))
print(paste(g,"contains",n,"GH loci total and",n2,"unique GHs",sep=" "))
all_content <- rbind(all_content,overview_content)}
#Move the genome column to be first :)
all_content <- all_content %>% select("Genome",everything()) %>%
mutate(HMM.Profile = str_remove(HMM.Profile,"\\.hmm$"))
print("Genome data has been collected and merged! Proceed to next block.")
#Labels from Carolina, combined into one comprehensive list
plant=c('GH1','GH2','GH3','GH4','GH5','GH8','GH9','GH11','GH12','GH15','GH16','GH17','GH26','GH27','GH28','GH29','GH36','GH39','GH43','GH44','GH48','GH51','GH53','GH55','GH67','GH74','GH78','GH93','GH94','GH95','GH115','GH117','GH121','PL1','PL2','PL6','PL7','PL9','PL11','PL15','PL22')
animal=c('GH1','GH2','GH3','GH4','GH18','GH19','GH20','GH29','GH33','GH38','GH58','GH79','GH84','GH85','GH88','GH89','GH92','GH95','GH98','GH99','GH101','GH105','GH109','GH110','GH113','PL6', 'PL8','PL12','PL13','PL21')
pg=c('GH23','GH24','GH25','GH73','GH102','GH103','GH104','GH108')
starch=c('GH13','GH15','GH57','GH77')
sucrose=c('GH32','GH68','GH70','GH91')
fungal=c('GH5','GH8','GH16','GH18','GH19','GH20','GH55','GH64','GH71','GH81')
dextran=c('GH66','GH70','GH87')
mucin=c('GH33','CBM40','GH29-B','GH29-A','CBM32','GH29','CBM32','FIVAR','GHnc','GH95','CBM51','GH101','GH129','GH20','GH2','GH42','GH84','GH89','UNK','Fn3')
sources <- list(plant=plant,animal=animal,pg=pg,starch=starch,sucrose=sucrose,fungal=fungal,
dextran=dextran,mucin=mucin)
sources.df <-  data.frame()
for (s in unique(unlist(sources))) {
Sources <- names(sources)[sapply(sources, function(v) s %in% v)]
# print(n)
sources.df <- rbind(sources.df, data.frame(Family = s, Source = paste(Sources, collapse = ","), stringsAsFactors = FALSE))}
#Factor and sort by GH number if applicable, for cleanliness
sources.df <- sources.df %>%
mutate(t = sub("_\\d+$", "", Family)) %>%
mutate(n = as.numeric(sub("GH", "", t)),  t = factor(t, levels = paste0("GH", sort(unique(n))))) %>%
select(Family,Source)
substrate_info <- read.delim2("fam-substrate-mapping-08012023.tsv") %>%
select(Substrate_high_level, Family) %>% unique() %>%
group_by(Family) %>%
summarise(Substrates = paste(Substrate_high_level, collapse = ", "), .groups = 'drop') %>%
filter(nzchar(Family)) %>%
left_join(sources.df, by = join_by(Family==Family))
function_info <- read_xls("dbCAN-sub.substrate.mapping.xls")
all_content_function <- all_content %>%
left_join(function_info,by= c("HMM.Profile" = "Family"),relationship="many-to-many")
#Filter for just GHs and then add substrate information
all_content_substrate <- all_content %>%
filter(grepl("GH",HMM.Profile)) %>%
mutate(Trimmed.Profile = sub("_\\d+$", "", HMM.Profile)) %>%
left_join(substrate_info,by= c("Trimmed.Profile" = "Family")) %>%
select(Genome, HMM.Profile, Trimmed.Profile, Substrates, Source,E.Value, Coverage) %>%
mutate(
HMM.Profile.Number = as.numeric(sub("GH", "", Trimmed.Profile)),
Trimmed.Profile = factor(Trimmed.Profile, levels = paste0("GH", sort(unique(HMM.Profile.Number))))
)
count_data <- all_content_substrate %>%
count(Genome, Trimmed.Profile) %>%
mutate(Label = if_else(n >= 8, as.character(Trimmed.Profile), ""))  # Create labels only for counts > 10
g <- ggplot(count_data, aes(x = Genome, y = n, fill = Trimmed.Profile)) +
geom_bar(stat = "identity",color="black") +
theme_minimal() +
geom_text(aes(label = Label), position = position_stack(vjust = 0.5), color = "white",size=2) +
labs(x = "Genome", y = "Count", fill = "HMM Profile", title = "Count of Each HMM Profile by Genome") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.text = element_text(size = 8),
legend.key.size = unit(8, 'pt'))
# g
count_substrate <- all_content_substrate %>%
separate_rows(Substrates, sep=", ") %>%
count(Genome, Substrates)
l <- c(setdiff(unique(count_substrate$Genome), "B_theta", "Akkermansia", "E_coli_K12"),
"B_theta", "Akkermansia", "E_coli_K12")
l <- c(setdiff(unique(count_substrate$Genome), "B_theta", "Akkermansia", "E_coli_K12"),
c("B_theta", "Akkermansia", "E_coli_K12"))
l <- c(setdiff(unique(count_substrate$Genome), c("B_theta", "Akkermansia", "E_coli_K12")),
c("B_theta", "Akkermansia", "E_coli_K12"))
count_substrate$Genome <- factor(count_substrate$Genome, levels=l)
g <- ggplot(count_substrate, aes(y = Substrates, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(y = "Substrate", x = "Genome", fill = "Count") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g
g
ggsave("heatmap_GH_substrates_all.pdf",scale=2)
count_substrate_other <- count_substrate %>% filter(Genome %in% non_MB)
non_MB <- c("B_theta", "Akkermansia", "E_coli_K12")
l <- c(setdiff(unique(count_substrate$Genome), non_MB), non_MB)
count_substrate$Genome <- factor(count_substrate$Genome, levels=l)
count_substrate_other <- count_substrate %>% filter(Genome %in% non_MB)
count_substrate <- count_substrate %>% filter(Genome !%in% non_MB)
count_substrate <- count_substrate %>% filter(!(Genome %in% non_MB))
g1 <- ggplot(count_substrate, aes(y = Substrates, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(y = "Substrate", x = "Genome", fill = "Count") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g2 <- ggplot(count_substrate_other, aes(y = Substrates, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(y = "Substrate", x = "Genome", fill = "Count") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g2
non_MB <- c("B_theta", "Akkermansia", "E_coli_K12")
count_substrate <- all_content_substrate %>%
separate_rows(Substrates, sep=", ") %>%
count(Genome, Substrates) %>%
mutate(Species = if_else(Genome %in% non_MB,"non-MB","MB"))
g1 <- ggplot(count_substrate, aes(y = Substrates, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(y = "Substrate", x = "Genome", fill = "Count") +
theme_classic() +
facet_wrap(Species) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
count_substrate <- all_content_substrate %>%
separate_rows(Substrates, sep=", ") %>%
count(Genome, Substrates) %>%
mutate(Species = if_else(Genome %in% non_MB,"non-MB","MB"))
View(count_substrate)
g1 <- ggplot(count_substrate, aes(y = Substrates, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(y = "Substrate", x = "Genome", fill = "Count") +
theme_classic() +
facet_wrap(~Species) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g1
g1 <- ggplot(count_substrate, aes(y = Substrates, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
# labs(y = "Substrate", x = "Genome", fill = "Count") +
theme_classic() +
facet_wrap(~Species) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g1
g1 <- ggplot(count_substrate, aes(y = Substrates, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
# labs(y = "Substrate", x = "Genome", fill = "Count") +
theme_classic() +
facet_grid(~Species, scales = "free_x", space = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g1
g <- ggplot(count_substrate, aes(y = Substrates, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "darkred") +
# labs(y = "Substrate", x = "Genome", fill = "Count") +
theme_classic() +
facet_grid(~Species, scales = "free_x", space = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g
g <- ggplot(count_substrate, aes(y = Substrates, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red3") +
# labs(y = "Substrate", x = "Genome", fill = "Count") +
theme_classic() +
facet_grid(~Species, scales = "free_x", space = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g
g
g <- ggplot(count_substrate, aes(y = Substrates, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red3") +
# labs(y = "Substrate", x = "Genome", fill = "Count") +
theme_minimal() +
facet_grid(~Species, scales = "free_x", space = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g
g <- ggplot(count_substrate, aes(y = Substrates, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red3") +
labs(y = "Substrate", x = "Genome", fill = "Count") +
theme_minimal() +
facet_grid(~Species, scales = "free_x", space = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g
g <- ggplot(count_substrate, aes(y = Substrates, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red3") +
labs(y = "Substrate", x = "Genome", fill = "Count") +
theme_ipsum()+
facet_grid(~Species, scales = "free_x", space = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(all_content_substrate)
non_MB <- c("B_theta", "Akkermansia", "E_coli_K12")
count_source <- all_content_substrate %>%
separate_rows(Source, sep=", ") %>%
count(Genome, Source) %>%
mutate(Species = if_else(Genome %in% non_MB,"non-MB","MB"))
g <- ggplot(count_substrate, aes(y = Source, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red3") +
labs(y = "Source", x = "Genome", fill = "Count") +
theme_minimal() +
facet_grid(~Species, scales = "free_x", space = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g
head(count_source)
g <- ggplot(count_source, aes(y = Source, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red3") +
labs(y = "Source", x = "Genome", fill = "Count") +
theme_minimal() +
facet_grid(~Species, scales = "free_x", space = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g
g <- ggplot(count_source, aes(y = Source, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red3") +
labs(y = "Source", x = "Genome", fill = "Count") +
theme_minimal() +
facet_grid(~Species, scales = "free_x", space = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_rect(fill = 'white'))
g
non_MB <- c("B_theta", "Akkermansia", "E_coli_K12")
count_source <- all_content_substrate %>%
separate_rows(Source, sep=",") %>%
count(Genome, Source) %>%
mutate(Species = if_else(Genome %in% non_MB,"non-MB","MB"))
g <- ggplot(count_source, aes(y = Source, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red3") +
labs(y = "Source", x = "Genome", fill = "Count") +
theme_minimal() +
facet_grid(~Species, scales = "free_x", space = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_rect(fill = 'white'))
g
g <- ggplot(count_source, aes(y = Source, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red3") +
labs(y = "Source", x = "Genome", fill = "Count") +
theme_classic() +
facet_grid(~Species, scales = "free_x", space = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_rect(fill = 'white'))
g
g <- ggplot(count_source, aes(y = Source, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red3") +
labs(y = "Source", x = "Genome", fill = "Count") +
theme_classic() +
facet_grid(~Species, scales = "free_x", space = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
strip.background = element_rect(color = "black", fill = "lightgrey", size = 1))
g
g <- ggplot(count_source, aes(y = Source, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red3") +
labs(y = "Source", x = "Genome", fill = "Count") +
theme_classic() +
facet_grid(~Species, scales = "free_x", space = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
strip.background = element_rect(color = "white", fill = "black", size = 1))
g
g <- ggplot(count_source, aes(y = Source, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red3") +
labs(y = "Source", x = "Genome", fill = "Count") +
theme_classic() +
facet_grid(~Species, scales = "free_x", space = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
strip.background = element_rect(color = "black", fill = "lightgrey", size = 1))
g
g <- ggplot(count_source, aes(y = Source, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red3") +
labs(y = "Source", x = "Genome", fill = "Count") +
theme_classic() +
facet_grid(~Species, scales = "free_x", space = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g
?ggsave
ggsave("heatmap_GH_sources.pdf",scale=2)
non_MB <- c("B_theta", "Akkermansia", "E_coli_K12")
count_substrate <- all_content_substrate %>%
separate_rows(Substrates, sep=", ") %>%
count(Genome, Substrates) %>%
mutate(Species = if_else(Genome %in% non_MB,"non-MB","MB"))
g <- ggplot(count_substrate, aes(y = Substrates, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red3") +
labs(y = "Substrate", x = "Genome", fill = "Count") +
theme_minimal() +
facet_grid(~Species, scales = "free_x", space = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g
g <- ggplot(count_substrate, aes(y = Substrates, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red3") +
labs(y = "Substrate", x = "Genome", fill = "Count") +
theme_classic() +
facet_grid(~Species, scales = "free_x", space = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g
ggsave("heatmap_GH_substrate.pdf",scale=2)
g
g <- ggplot(count_source, aes(y = Source, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red3") +
labs(y = "Source", x = "Genome", fill = "Count") +
theme_classic() +
facet_grid(~Species, scales = "free_x", space = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g
g <- ggplot(count_source, aes(y = Source, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue3") +
labs(y = "Source", x = "Genome", fill = "Count") +
theme_classic() +
facet_grid(~Species, scales = "free_x", space = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g
g <- ggplot(count_source, aes(y = Source, x = Genome, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "darkblue") +
labs(y = "Source", x = "Genome", fill = "Count") +
theme_classic() +
facet_grid(~Species, scales = "free_x", space = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g
?write.csv
write.csv(count_substrate,"substrate_counts.csv")
write.csv(count_substrate,"substrate_counts.csv",row.names = FALSE)
write.csv(count_substrate,"substrate_counts.csv",row.names = FALSE)
write.csv(count_source,"source_counts.csv",row.names = FALSE)
write.csv(all_content_substrate,"substrate_counts_detailed.csv",row.names = FALSE)
g
